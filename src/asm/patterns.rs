use regex::Regex;

pub struct Patterns {
    pub label: Regex,
    pub label_op: Regex,
    // immediates
    pub i_int: Regex,
    pub i_str: Regex,
    pub i_char: Regex,
    // other chars
    pub comma: Regex,
    // directives
    pub int_dir: Regex,
    pub byt_dir: Regex,
    pub str_dir: Regex,
    // registers
    pub rg: Regex,
    pub pc: Regex,
    pub sp: Regex,
    pub hp: Regex,
    // instructions
    pub jmp: Regex,
    pub jmr: Regex,
    pub bnz: Regex,
    pub bgt: Regex,
    pub blt: Regex,
    pub brz: Regex,
    pub bal: Regex,
    pub mov: Regex,
    pub movi: Regex,
    pub lda: Regex,
    pub str: Regex,
    pub ldr: Regex,
    pub stb: Regex,
    pub ldb: Regex,
    pub push: Regex,
    pub pop: Regex,
    pub peek: Regex,
    pub and: Regex,
    pub or: Regex,
    pub not: Regex,
    pub cmp: Regex,
    pub cmpi: Regex,
    pub add: Regex,
    pub adi: Regex,
    pub sub: Regex,
    pub mul: Regex,
    pub muli: Regex,
    pub div: Regex,
    pub divi: Regex,
    pub alci: Regex,
    pub allc: Regex,
    // traps
    pub trp: Regex,
    pub comment: Regex,
    pub any: Regex,
}

impl Patterns {
    pub fn new() -> Self {
        Self {
            label: Regex::new(r"^[A-Za-z][A-Za-z0-9_]*:$").unwrap(),
            label_op: Regex::new(r"^[A-Za-z][A-Za-z0-9_]*$").unwrap(),
            i_int: Regex::new(r"^#-?(0|[1-9][0-9]*)$").unwrap(),
            i_char: Regex::new(r"^'.*'$").unwrap(),
            i_str: Regex::new("^\".*\"$").unwrap(),
            comma: Regex::new(r"^,$").unwrap(),
            int_dir: Regex::new(r"^\.INT$").unwrap(),
            byt_dir: Regex::new(r"^\.BYT$").unwrap(),
            str_dir: Regex::new(r"^\.STR$").unwrap(),
            rg: Regex::new(r"^R(6[1-4]|[1-5]?[0-9])$").unwrap(),
            pc: Regex::new(r"^PC$").unwrap(),
            sp: Regex::new(r"^SP$").unwrap(),
            hp: Regex::new(r"^HP$").unwrap(),
            jmp: Regex::new(r"^JMP$").unwrap(),
            jmr: Regex::new(r"^JMR$").unwrap(),
            bnz: Regex::new(r"^BNZ$").unwrap(),
            bgt: Regex::new(r"^BGT$").unwrap(),
            blt: Regex::new(r"^BLT$").unwrap(),
            brz: Regex::new(r"^BRZ$").unwrap(),
            bal: Regex::new(r"^BAL$").unwrap(),
            mov: Regex::new(r"^MOV$").unwrap(),
            movi: Regex::new(r"^MOVI$").unwrap(),
            lda: Regex::new(r"^LDA$").unwrap(),
            str: Regex::new(r"^STR$").unwrap(),
            ldr: Regex::new(r"^LDR$").unwrap(),
            stb: Regex::new(r"^STB$").unwrap(),
            ldb: Regex::new(r"^LDB$").unwrap(),
            push: Regex::new(r"^PUSH$").unwrap(),
            pop: Regex::new(r"^POP$").unwrap(),
            peek: Regex::new(r"^PEEK$").unwrap(),
            and: Regex::new(r"^AND$").unwrap(),
            or: Regex::new(r"^OR$").unwrap(),
            not: Regex::new(r"^NOT$").unwrap(),
            cmp: Regex::new(r"^CMP$").unwrap(),
            cmpi: Regex::new(r"^CMPI$").unwrap(),
            add: Regex::new(r"^ADD$").unwrap(),
            adi: Regex::new(r"^ADI$").unwrap(),
            sub: Regex::new(r"^SUB$").unwrap(),
            mul: Regex::new(r"^MUL$").unwrap(),
            muli: Regex::new(r"^MULI$").unwrap(),
            div: Regex::new(r"^DIV$").unwrap(),
            divi: Regex::new(r"^DIVI$").unwrap(),
            alci: Regex::new(r"^ALCI$").unwrap(),
            allc: Regex::new(r"^ALLC$").unwrap(),
            trp: Regex::new(r"^TRP$").unwrap(),
            comment: Regex::new(r"^;.*$").unwrap(),
            any: Regex::new("\\.?\\w+:?|,|#-?[0-9]+|\".*\"|'.*'|;.*").unwrap(),
            // any: Regex::new("$")
        }
    }
}
