use regex::Regex;

pub struct Patterns {
    pub label: Regex,
    // immediates
    pub i_int: Regex,
    pub i_str: Regex,
    pub i_char: Regex,
    // other chars
    pub comma: Regex,
    // directives
    pub int_dir: Regex,
    pub byt_dir: Regex,
    pub str_dir: Regex,
    // registers
    pub rg: Regex,
    pub pc: Regex,
    // pub sp_rg: Regex,
    // instructions
    pub jmp: Regex,
    pub jmr: Regex,
    pub bnz: Regex,
    pub bgt: Regex,
    pub blt: Regex,
    pub brz: Regex,
    pub bal: Regex,
    pub mov: Regex,
    pub movi: Regex,
    pub lda: Regex,
    pub str: Regex,
    pub ldr: Regex,
    pub stb: Regex,
    pub ldb: Regex,
    pub push: Regex,
    pub pop: Regex,
    pub peek: Regex,
    pub and: Regex,
    pub or: Regex,
    pub not: Regex,
    pub cmp: Regex,
    pub cmpi: Regex,
    pub add: Regex,
    pub adi: Regex,
    pub sub: Regex,
    pub mul: Regex,
    pub muli: Regex,
    pub div: Regex,
    pub divi: Regex,
    pub alci: Regex,
    pub allc: Regex,
    // traps
    pub trp: Regex,
    pub any: Regex,
}

impl Patterns {
    pub fn new() -> Self {
        Self {
            label: Regex::new("^[A-Za-z][A-Za-z0-9_]*:").unwrap(),
            i_int: Regex::new("^#(0|[1-9][0-9]*)").unwrap(),
            i_char: Regex::new("^'.'").unwrap(),
            i_str: Regex::new("\".*\"").unwrap(),
            comma: Regex::new("^,").unwrap(),
            int_dir: Regex::new("^.INT").unwrap(),
            byt_dir: Regex::new("^.BYT").unwrap(),
            str_dir: Regex::new("^.STR").unwrap(),
            rg: Regex::new("^R(6[1-4]|[1-5]?[0-9])").unwrap(),
            pc: Regex::new("^PC").unwrap(),
            // sp_rg: Regex::new("^").unwrap(),
            jmp: Regex::new("^JMP").unwrap(),
            jmr: Regex::new("^JMR").unwrap(),
            bnz: Regex::new("^BNZ").unwrap(),
            bgt: Regex::new("^BGT").unwrap(),
            blt: Regex::new("^BLT").unwrap(),
            brz: Regex::new("^BRZ").unwrap(),
            bal: Regex::new("^BAL").unwrap(),
            mov: Regex::new("^MOV").unwrap(),
            movi: Regex::new("^MOVI").unwrap(),
            lda: Regex::new("^LDA").unwrap(),
            str: Regex::new("^STR").unwrap(),
            ldr: Regex::new("^LDR").unwrap(),
            stb: Regex::new("^STB").unwrap(),
            ldb: Regex::new("^LDB").unwrap(),
            push: Regex::new("^PUSH").unwrap(),
            pop: Regex::new("^POP").unwrap(),
            peek: Regex::new("^PEEK").unwrap(),
            and: Regex::new("^AND").unwrap(),
            or: Regex::new("^OR").unwrap(),
            not: Regex::new("^NOT").unwrap(),
            cmp: Regex::new("^CMP").unwrap(),
            cmpi: Regex::new("^CMPI").unwrap(),
            add: Regex::new("^ADD").unwrap(),
            adi: Regex::new("^ADI").unwrap(),
            sub: Regex::new("^SUB").unwrap(),
            mul: Regex::new("^MUL").unwrap(),
            muli: Regex::new("^MULI").unwrap(),
            div: Regex::new("^DIV").unwrap(),
            divi: Regex::new("^DIVI").unwrap(),
            alci: Regex::new("^ALCI").unwrap(),
            allc: Regex::new("^ALLC").unwrap(),
            trp: Regex::new("^TRP").unwrap(),
            any: Regex::new("\\.?\\w*|,|#[0-9]+|\".*\"").unwrap(),
        }
    }
}
